task 'build', 'Build all the things', -> build smile

task 'launch', 'Launch the server thing', -> build -> launch smile

task 'watch', 'Build all the changes forever', -> watch -> build smile

task 'launch:watch', 'Launch the server thing and then watch', ->
  watch -> build smile
  build -> launch smile

launch = (callback) -> run 'node', 'server/main.js', callback

build = (callback) -> prepare_dir 'build', -> coffee -> webify -> server callback

watch = (callback) ->
  console.log 'watching src/ ...'
  last = new Date()
  createMonitor 'src', (monitor) ->
    for event in ['created', 'removed', 'changed']
      monitor.on event, (fn, stat) ->
        if stat.mtime > last
          if fn.match /\.(?:js|coffee|html)$/
            last = stat.mtime
            callback()
          else
            console.log fn, event, "but did not match filter"

webify = (callback) -> prepare_dir 'web', -> vendor -> browserify -> index callback

server = (callback) -> prepare_dir 'server', -> run 'cp', 'build/main.js', 'server/', callback

prepare_dir = (dir, callback) -> destroy_dir dir, -> fs.mkdir dir, callback

destroy_dir = (dir, callback) -> run 'rm', '-rf', dir, callback

coffee = (callback) ->
  on_success glob, 'src/*.coffee', (files) ->
    run 'coffee', '-c', '-o', 'build', files, callback if files.length > 0

vendor = (callback) ->
  prepare_dir 'web/vendor', -> 
    on_success glob, 'vendor/*.js', (files) ->
      run 'cp', files, 'web/vendor/', callback

browserify = (callback) ->
  run 'browserify', '-o', 'web/bundle.js', 'build/launch.js', callback

index = (callback) -> run 'cp', 'src/index.html', 'web/', callback

on_success = (fn, args..., callback) ->
  fn args..., (err, result...) ->
    if err? then throw err else callback result...

run = (cmd, args..., callback) ->
  throw "run demands a callback" unless typeof callback is 'function'
  args = [].concat args...
  on_success which, cmd, (path) ->
    console.log path, args...
    system path, args, callback

system = (path, args, callback) ->
  child = spawn path, args
  child.stdout.pipe(process.stdout)
  child.stderr.pipe(process.stderr)
  child.on 'exit', (status) -> callback?() if status is 0

smile = ->
  console.log ':-)'
  true

fs = require 'fs'
glob = require 'glob'
{spawn} = require 'child_process'
{createMonitor} = require 'watch'
which = require 'which'
